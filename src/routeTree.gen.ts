/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ContentManagerIndexImport } from './routes/content-manager/index'
import { Route as CommunityIndexImport } from './routes/community/index'
import { Route as ChannelSettingsIndexImport } from './routes/channel-settings/index'
import { Route as AnalyticsIndexImport } from './routes/analytics/index'
import { Route as VideoIdEditIndexImport } from './routes/video/$id/edit/index'

// Create/Update Routes

const ContentManagerIndexRoute = ContentManagerIndexImport.update({
  id: '/content-manager/',
  path: '/content-manager/',
  getParentRoute: () => rootRoute,
} as any)

const CommunityIndexRoute = CommunityIndexImport.update({
  id: '/community/',
  path: '/community/',
  getParentRoute: () => rootRoute,
} as any)

const ChannelSettingsIndexRoute = ChannelSettingsIndexImport.update({
  id: '/channel-settings/',
  path: '/channel-settings/',
  getParentRoute: () => rootRoute,
} as any)

const AnalyticsIndexRoute = AnalyticsIndexImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => rootRoute,
} as any)

const VideoIdEditIndexRoute = VideoIdEditIndexImport.update({
  id: '/video/$id/edit/',
  path: '/video/$id/edit/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/analytics/': {
      id: '/analytics/'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsIndexImport
      parentRoute: typeof rootRoute
    }
    '/channel-settings/': {
      id: '/channel-settings/'
      path: '/channel-settings'
      fullPath: '/channel-settings'
      preLoaderRoute: typeof ChannelSettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/community/': {
      id: '/community/'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof CommunityIndexImport
      parentRoute: typeof rootRoute
    }
    '/content-manager/': {
      id: '/content-manager/'
      path: '/content-manager'
      fullPath: '/content-manager'
      preLoaderRoute: typeof ContentManagerIndexImport
      parentRoute: typeof rootRoute
    }
    '/video/$id/edit/': {
      id: '/video/$id/edit/'
      path: '/video/$id/edit'
      fullPath: '/video/$id/edit'
      preLoaderRoute: typeof VideoIdEditIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/analytics': typeof AnalyticsIndexRoute
  '/channel-settings': typeof ChannelSettingsIndexRoute
  '/community': typeof CommunityIndexRoute
  '/content-manager': typeof ContentManagerIndexRoute
  '/video/$id/edit': typeof VideoIdEditIndexRoute
}

export interface FileRoutesByTo {
  '/analytics': typeof AnalyticsIndexRoute
  '/channel-settings': typeof ChannelSettingsIndexRoute
  '/community': typeof CommunityIndexRoute
  '/content-manager': typeof ContentManagerIndexRoute
  '/video/$id/edit': typeof VideoIdEditIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/analytics/': typeof AnalyticsIndexRoute
  '/channel-settings/': typeof ChannelSettingsIndexRoute
  '/community/': typeof CommunityIndexRoute
  '/content-manager/': typeof ContentManagerIndexRoute
  '/video/$id/edit/': typeof VideoIdEditIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/analytics'
    | '/channel-settings'
    | '/community'
    | '/content-manager'
    | '/video/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/analytics'
    | '/channel-settings'
    | '/community'
    | '/content-manager'
    | '/video/$id/edit'
  id:
    | '__root__'
    | '/analytics/'
    | '/channel-settings/'
    | '/community/'
    | '/content-manager/'
    | '/video/$id/edit/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AnalyticsIndexRoute: typeof AnalyticsIndexRoute
  ChannelSettingsIndexRoute: typeof ChannelSettingsIndexRoute
  CommunityIndexRoute: typeof CommunityIndexRoute
  ContentManagerIndexRoute: typeof ContentManagerIndexRoute
  VideoIdEditIndexRoute: typeof VideoIdEditIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AnalyticsIndexRoute: AnalyticsIndexRoute,
  ChannelSettingsIndexRoute: ChannelSettingsIndexRoute,
  CommunityIndexRoute: CommunityIndexRoute,
  ContentManagerIndexRoute: ContentManagerIndexRoute,
  VideoIdEditIndexRoute: VideoIdEditIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/analytics/",
        "/channel-settings/",
        "/community/",
        "/content-manager/",
        "/video/$id/edit/"
      ]
    },
    "/analytics/": {
      "filePath": "analytics/index.tsx"
    },
    "/channel-settings/": {
      "filePath": "channel-settings/index.tsx"
    },
    "/community/": {
      "filePath": "community/index.tsx"
    },
    "/content-manager/": {
      "filePath": "content-manager/index.tsx"
    },
    "/video/$id/edit/": {
      "filePath": "video/$id/edit/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
