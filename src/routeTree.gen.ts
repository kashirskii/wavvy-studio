/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutContentManagerIndexImport } from './routes/_layout/content-manager/index'
import { Route as LayoutCommunityIndexImport } from './routes/_layout/community/index'
import { Route as LayoutChannelSettingsIndexImport } from './routes/_layout/channel-settings/index'
import { Route as LayoutAnalyticsIndexImport } from './routes/_layout/analytics/index'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutContentManagerIndexRoute = LayoutContentManagerIndexImport.update({
  id: '/content-manager/',
  path: '/content-manager/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutCommunityIndexRoute = LayoutCommunityIndexImport.update({
  id: '/community/',
  path: '/community/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutChannelSettingsIndexRoute = LayoutChannelSettingsIndexImport.update({
  id: '/channel-settings/',
  path: '/channel-settings/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAnalyticsIndexRoute = LayoutAnalyticsIndexImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/analytics/': {
      id: '/_layout/analytics/'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof LayoutAnalyticsIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/channel-settings/': {
      id: '/_layout/channel-settings/'
      path: '/channel-settings'
      fullPath: '/channel-settings'
      preLoaderRoute: typeof LayoutChannelSettingsIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/community/': {
      id: '/_layout/community/'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof LayoutCommunityIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/content-manager/': {
      id: '/_layout/content-manager/'
      path: '/content-manager'
      fullPath: '/content-manager'
      preLoaderRoute: typeof LayoutContentManagerIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutAnalyticsIndexRoute: typeof LayoutAnalyticsIndexRoute
  LayoutChannelSettingsIndexRoute: typeof LayoutChannelSettingsIndexRoute
  LayoutCommunityIndexRoute: typeof LayoutCommunityIndexRoute
  LayoutContentManagerIndexRoute: typeof LayoutContentManagerIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutAnalyticsIndexRoute: LayoutAnalyticsIndexRoute,
  LayoutChannelSettingsIndexRoute: LayoutChannelSettingsIndexRoute,
  LayoutCommunityIndexRoute: LayoutCommunityIndexRoute,
  LayoutContentManagerIndexRoute: LayoutContentManagerIndexRoute,
}

const LayoutRouteWithChildren = LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/analytics': typeof LayoutAnalyticsIndexRoute
  '/channel-settings': typeof LayoutChannelSettingsIndexRoute
  '/community': typeof LayoutCommunityIndexRoute
  '/content-manager': typeof LayoutContentManagerIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof LayoutIndexRoute
  '/analytics': typeof LayoutAnalyticsIndexRoute
  '/channel-settings': typeof LayoutChannelSettingsIndexRoute
  '/community': typeof LayoutCommunityIndexRoute
  '/content-manager': typeof LayoutContentManagerIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/analytics/': typeof LayoutAnalyticsIndexRoute
  '/_layout/channel-settings/': typeof LayoutChannelSettingsIndexRoute
  '/_layout/community/': typeof LayoutCommunityIndexRoute
  '/_layout/content-manager/': typeof LayoutContentManagerIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/analytics' | '/channel-settings' | '/community' | '/content-manager'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/analytics' | '/channel-settings' | '/community' | '/content-manager'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/'
    | '/_layout/analytics/'
    | '/_layout/channel-settings/'
    | '/_layout/community/'
    | '/_layout/content-manager/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/",
        "/_layout/analytics/",
        "/_layout/channel-settings/",
        "/_layout/community/",
        "/_layout/content-manager/"
      ]
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/analytics/": {
      "filePath": "_layout/analytics/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/channel-settings/": {
      "filePath": "_layout/channel-settings/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/community/": {
      "filePath": "_layout/community/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/content-manager/": {
      "filePath": "_layout/content-manager/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
